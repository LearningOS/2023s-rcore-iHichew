var searchIndex = JSON.parse('{\
"os":{"doc":"The main module and entrypoint","t":[5,0,0,0,0,0,0,0,14,14,5,0,0,0,0,0,0,17,17,17,17,17,17,17,17,17,17,17,3,11,11,11,11,5,11,11,11,11,2,2,0,12,3,6,3,12,5,11,11,11,11,11,11,11,11,0,12,3,17,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,8,18,3,3,3,3,3,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,5,5,12,11,12,11,5,12,11,0,10,10,12,12,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,10,18,3,3,3,18,18,3,18,18,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,5,11,11,11,12,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,13,13,13,3,3,17,4,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,11,11,5,11,11,11,11,11,12,12,12,12,3,3,3,3,3,3,3,3,8,3,3,3,3,12,0,12,12,12,12,12,12,12,5,0,5,12,0,5,5,0,0,12,12,5,12,10,5,5,5,5,12,12,12,12,17,17,3,3,3,3,8,17,6,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,6,3,3,12,10,11,11,11,11,11,11,11,12,10,11,11,11,12,11,5,5,5,11,11,11,11,5,11,11,11,10,11,11,12,12,11,11,11,11,11,11,11,11,11,7,7,5,5,5,13,13,3,3,3,4,3,18,18,18,18,12,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,5,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,11,12,11,11,11,11,11,12,11,11,11,5,11,11,5,5,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,18,18,18,3,3,3,18,18,3,3,18,18,18,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,5,5,5,5,5,3,12,0,3,11,11,11,11,12,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,5,5,5,5,5,5,5,5,5,5,3,3,11,11,11,11,5,11,11,11,11,11,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,11,11,11,11,11,11,12,12,12,17,3,3,17,3,13,13,3,3,3,3,3,4,13,13,12,0,5,5,12,11,11,5,5,5,5,0,5,5,5,5,11,5,11,5,12,0,12,11,12,5,0,12,12,5,5,0,12,5,12,5,0,12,5,0,12,5,0,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,12,12,11,11,11,11,12,12,3,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,12,11,5,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,12,5,11,11,11,11,11,11,11,11,11,3,3,12,11,11,11,11,11,12,5,5,5,11,11,11,11,12,11,11,11,5,5,11,5,11,11,11,11,11,11,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,13,3,3,4,13,13,11,12,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,12,11,12,12,12,12,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,17,17,17,5,5,5,5,3,0,5,5,12,12,12,5,5,12,5,5,12,5,12,3,11,11,11,11,11,11,11,11,12,12,12,11,12,11,12,11,11,11,12],"n":["clear_bss","config","console","drivers","fs","lang_items","logging","mm","print","println","rust_main","sbi","sync","syscall","task","timer","trap","CLOCK_FREQ","KERNEL_HEAP_SIZE","KERNEL_STACK_SIZE","MAX_SYSCALL_NUM","MEMORY_END","MMIO","PAGE_SIZE","PAGE_SIZE_BITS","TRAMPOLINE","TRAP_CONTEXT_BASE","USER_STACK_SIZE","Stdout","borrow","borrow_mut","from","into","print","try_from","try_into","type_id","write_str","BLOCK_DEVICE","BLOCK_DEVICE","block","0","BLOCK_DEVICE","BlockDeviceImpl","VirtIOBlock","__private_field","block_device_test","borrow","borrow_mut","deref","from","into","try_from","try_into","type_id","virtio_blk","0","QUEUE_FRAMES","VIRTIO0","VirtIOBlock","VirtioHal","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","dma_alloc","dma_dealloc","from","from","from","into","into","into","new","phys_to_virt","read_block","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","virt_to_phys","write_block","DIR","FILE","File","NULL","OSInode","OpenFlags","Pipe","Stat","StatMode","Stdin","Stdout","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","buffer","clone","clone_into","cmp","complement","contains","dev","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","inner","ino","inode","insert","intersection","intersects","into","into","is_all","is_empty","list_apps","make_pipe","mode","ne","nlink","not","open_file","pad","partial_cmp","pipe","read","readable","readable","readable","remove","set","stdio","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","writable","writable","writable","write","CREATE","OSInode","OSInodeInner","OpenFlags","RDONLY","RDWR","ROOT_INODE","TRUNC","WRONLY","__private_field","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","deref","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","inner","inode","insert","intersection","intersects","into","into","into","into","is_all","is_empty","list_apps","ne","new","not","offset","open_file","partial_cmp","read","read_all","read_write","readable","readable","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","writable","writable","write","Empty","Full","Normal","Pipe","PipeRingBuffer","RING_BUFFER_SIZE","RingBufferStatus","all_write_ends_closed","arr","available_read","available_write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone_into","eq","from","from","from","head","into","into","into","make_pipe","new","read","read_byte","read_end_with_buffer","readable","readable","set_write_end","status","tail","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","writable","writable","write","write_byte","write_end","write_end_with_buffer","Stdin","Stdout","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","read","read","readable","readable","try_from","try_from","try_into","try_into","type_id","type_id","writable","writable","write","write","panic","SimpleLogger","borrow","borrow_mut","enabled","flush","from","init","into","log","try_from","try_into","type_id","0","0","0","0","FrameTracker","KERNEL_SPACE","MapPermission","MemorySet","PageTable","PageTableEntry","PhysAddr","PhysPageNum","StepByOne","UserBuffer","UserBufferIterator","VirtAddr","VirtPageNum","__private_field","address","areas","bits","bits","buffers","buffers","current_buffer","current_idx","frame_alloc","frame_allocator","frame_dealloc","frames","heap_allocator","init","kernel_token","memory_set","page_table","page_table","ppn","remap_test","root_ppn","step","translated_byte_buffer","translated_ref","translated_refmut","translated_str","0","0","0","0","PA_WIDTH_SV39","PPN_WIDTH_SV39","PhysAddr","PhysPageNum","SimpleRange","SimpleRangeIterator","StepByOne","VA_WIDTH_SV39","VPNRange","VPN_WIDTH_SV39","VirtAddr","VirtPageNum","aligned","aligned","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","current","end","eq","eq","eq","eq","floor","floor","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_bytes_array","get_end","get_mut","get_mut","get_pte_array","get_ref","get_start","indexes","into","into","into","into","into","into","into_iter","into_iter","l","ne","ne","ne","ne","new","new","next","page_offset","page_offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","step","step","step","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","FRAME_ALLOCATOR","FrameAllocator","FrameAllocatorImpl","FrameTracker","StackFrameAllocator","__private_field","alloc","alloc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","current","dealloc","dealloc","deref","drop","end","fmt","frame_alloc","frame_allocator_test","frame_dealloc","from","from","from","init","init_frame_allocator","into","into","into","new","new","new","ppn","recycled","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HEAP_ALLOCATOR","HEAP_SPACE","handle_alloc_error","heap_test","init_heap","Framed","Identical","KERNEL_SPACE","MapArea","MapPermission","MapType","MemorySet","R","U","W","X","__private_field","activate","all","append_to","append_to","areas","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","copy_data","data_frames","deref","difference","ebss","edata","ekernel","empty","eq","eq","erodata","etext","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_another","from_bits","from_bits_truncate","from_bits_unchecked","from_elf","from_existed_user","from_iter","hash","insert","insert_framed_area","intersection","intersects","into","into","into","into","into","is_all","is_empty","kernel_token","map","map_one","map_perm","map_trampoline","map_type","ne","new","new_bare","new_kernel","not","page_table","partial_cmp","push","recycle_data_pages","remap_test","remove","remove_area_with_start_vpn","sbss_with_stack","sdata","set","shrink_to","shrink_to","srodata","stext","strampoline","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","token","translate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap","unmap_one","vpn_range","A","D","G","PTEFlags","PageTable","PageTableEntry","R","U","UserBuffer","UserBufferIterator","V","W","X","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","buffers","clone","clone","clone_into","clone_into","cmp","complement","contains","current_buffer","current_idx","difference","empty","empty","eq","executable","extend","find_pte","find_pte_create","flags","fmt","fmt","fmt","fmt","fmt","frames","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_token","hash","insert","intersection","intersects","into","into","into","into","into","into_iter","into_iter","is_all","is_empty","is_valid","len","map","ne","new","new","new","next","not","partial_cmp","ppn","readable","remove","root_ppn","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","token","translate","translate_va","translated_byte_buffer","translated_ref","translated_refmut","translated_str","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap","writable","SBI_CONSOLE_GETCHAR","SBI_CONSOLE_PUTCHAR","SBI_SET_TIMER","SBI_SHUTDOWN","console_getchar","console_putchar","sbi_call","set_timer","shutdown","UPSafeCell","inner","up","UPSafeCell","borrow","borrow_mut","exclusive_access","from","inner","into","new","try_from","try_into","type_id","SYSCALL_CLOSE","SYSCALL_DUP","SYSCALL_EXEC","SYSCALL_EXIT","SYSCALL_FORK","SYSCALL_FSTAT","SYSCALL_GETPID","SYSCALL_GET_TIME","SYSCALL_KILL","SYSCALL_LINKAT","SYSCALL_MMAP","SYSCALL_MUNMAP","SYSCALL_OPEN","SYSCALL_PIPE","SYSCALL_READ","SYSCALL_SBRK","SYSCALL_SET_PRIORITY","SYSCALL_SIGACTION","SYSCALL_SIGPROCMASK","SYSCALL_SIGRETURN","SYSCALL_SPAWN","SYSCALL_TASK_INFO","SYSCALL_UNLINKAT","SYSCALL_WAITPID","SYSCALL_WRITE","SYSCALL_YIELD","fs","process","syscall","sys_close","sys_dup","sys_fstat","sys_linkat","sys_open","sys_pipe","sys_read","sys_unlinkat","sys_write","TaskInfo","TimeVal","borrow","borrow","borrow_mut","borrow_mut","check_sigaction_error","fmt","from","from","into","into","sec","status","sys_exec","sys_exit","sys_fork","sys_get_time","sys_getpid","sys_kill","sys_mmap","sys_munmap","sys_sbrk","sys_set_priority","sys_sigaction","sys_sigprocmask","sys_sigreturn","sys_spawn","sys_task_info","sys_waitpid","sys_yield","syscall_times","time","try_from","try_from","try_into","try_into","type_id","type_id","usec","0","0","IDLE_PID","INITPROC","KernelStack","MAX_SIG","PidHandle","Ready","Running","SignalAction","SignalActions","SignalFlags","TaskContext","TaskControlBlock","TaskStatus","UnInit","Zombie","__private_field","action","add_initproc","add_task","bits","borrow","borrow_mut","call_kernel_signal_handler","call_user_signal_handler","check_pending_signals","check_signals_error_of_current","context","current_add_signal","current_task","current_trap_cx","current_user_token","deref","exit_current_and_run_next","from","handle_signals","handler","id","inner","into","kernel_stack","kstack_alloc","manager","mask","pid","pid2task","pid_alloc","processor","ra","run_tasks","s","schedule","signal","sp","suspend_current_and_run_next","switch","table","take_current_task","task","try_from","try_into","type_id","SignalAction","SignalActions","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","fmt","from","from","handler","into","into","mask","table","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","TaskContext","borrow","borrow_mut","from","goto_trap_return","into","ra","s","sp","try_from","try_into","type_id","zero_init","0","0","KSTACK_ALLOCATOR","KernelStack","PID_ALLOCATOR","PidHandle","RecycleAllocator","__private_field","__private_field","alloc","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","current","dealloc","deref","deref","drop","drop","from","from","from","from","from","get_top","into","into","into","into","into","kernel_stack_position","kstack_alloc","new","pid_alloc","push_on_top","recycled","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","PID2TCB","TASK_MANAGER","TaskManager","__private_field","__private_field","add","add_task","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","fetch","fetch_task","from","from","from","into","into","into","new","pid2task","ready_queue","remove_from_pid2task","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","PROCESSOR","Processor","__private_field","borrow","borrow","borrow_mut","borrow_mut","current","current","current_task","current_trap_cx","current_user_token","deref","from","from","get_idle_task_cx_ptr","idle_task_cx","into","into","new","run_tasks","schedule","take_current","take_current_task","try_from","try_from","try_into","try_into","type_id","type_id","MAX_SIG","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGDEF","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGKILL","SIGPIPE","SIGPROF","SIGPWR","SIGQUIT","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SignalFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","check_error","clone","clone_into","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","ne","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","__switch","Ready","Running","TaskControlBlock","TaskControlBlockInner","TaskStatus","UnInit","Zombie","alloc_fd","base_size","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","change_program_brk","children","clone","clone_into","eq","exec","exit_code","fd_table","fork","from","from","from","frozen","get_status","get_trap_cx","get_user_token","get_user_token","getpid","handling_sig","heap_bottom","inner","inner_exclusive_access","into","into","into","is_zombie","kernel_stack","killed","memory_set","new","parent","pid","program_brk","signal_actions","signal_mask","signals","task_cx","task_status","to_owned","trap_ctx_backup","trap_cx_ppn","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","MICRO_PER_SEC","MSEC_PER_SEC","TICKS_PER_SEC","get_time","get_time_ms","get_time_us","set_next_trigger","TrapContext","context","enable_timer_interrupt","init","kernel_satp","kernel_sp","sepc","set_kernel_trap_entry","set_user_trap_entry","sstatus","trap_from_kernel","trap_handler","trap_handler","trap_return","x","TrapContext","app_init_context","borrow","borrow_mut","clone","clone_into","fmt","from","into","kernel_satp","kernel_sp","sepc","set_sp","sstatus","to_owned","trap_handler","try_from","try_into","type_id","x"],"q":["os","","","","","","","","","","","","","","","","","os::config","","","","","","","","","","","os::console","","","","","","","","","","os::drivers","","","os::drivers::block","","","","","","","","","","","","","","","os::drivers::block::virtio_blk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::inode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::pipe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::fs::stdio","","","","","","","","","","","","","","","","","","","","","","","","os::lang_items","os::logging","","","","","","","","","","","","os::mm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::frame_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::heap_allocator","","","","","os::mm::memory_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::mm::page_table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::sbi","","","","","","","","","os::sync","","","os::sync::up","","","","","","","","","","","os::syscall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::syscall::fs","","","","","","","","","os::syscall::process","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::action","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::context","","","","","","","","","","","","","os::task::id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::processor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::signal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::task::switch","os::task::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os::timer","","","","","","","os::trap","","","","","","","","","","","","","","","os::trap::context","","","","","","","","","","","","","","","","","","",""],"d":["clear BSS segment","Constants in the kernel","SBI console driver, for text output","block device driver","File trait &amp; inode(dir, file, pipe, stdin, stdout)","The panic handler","Global logger","Memory management implementation","Print! to the host console using the format string and …","Println! to the host console using the format string and …","the rust entry-point of os","SBI call wrappers","Synchronization and interior mutability primitives","Implementation of syscalls","Implementation of process management mechanism","RISC-V timer-related functionality","Trap handling functionality","clock frequency","kernel heap size","kernel stack size","the max number of syscall","the physical memory end","The base address of control registers in Virtio_Block …","page size : 4KB","page size bits: 12","the virtual addr of trapoline","the virtual addr of trap context","user app’s stack size","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","virtio_blk device driver","","The global block device driver instance: BLOCK_DEVICE with …","","VirtIOBlock device driver strcuture for virtio_blk device","","Test the block device","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","VirtIOBlock device driver strcuture for virtio_blk device","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new VirtIOBlock driver with VIRTIO0 base_addr for …","","","","","","","","","","","","","","directory","ordinary regular file","trait File for all file types","null","inode in memory A wrapper around a filesystem inode to …","The flags argument to the open() system call is …","IPC pipe","The stat of a inode","The mode of a inode whether a directory or a file","stdin file for getting chars from console","stdout file for putting chars to console","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","ID of device containing file","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","inode number","<code>Arc&lt;Inode&gt;</code> -&gt; <code>OSInodeInner</code>: In order to open files …","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","List all apps in the root directory","Return (read_end, write_end)","file type and mode","","number of hard links","Returns the complement of this set of flags.","Open a file","unused pad","","","read from the file to buf, return the number of bytes read","the file readable?","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Stdin &amp; Stdout","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","the file writable?","","","write to the file from buf, return the number of bytes …","create new file","inode in memory A wrapper around a filesystem inode to …","The OS inode inner in ‘UPSafeCell’","The flags argument to the open() system call is …","readyonly","read and write","","truncate file size to 0","writeonly","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","List all apps in the root directory","","create a new inode in memory","Returns the complement of this set of flags.","","Open a file","","","read all data from the inode","Do not check validity for simplicity Return (readable, …","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","IPC pipe","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return (read_end, write_end)","","","","create readable pipe","","","","","","","","","","","","","","","","","","","","","create writable pipe","stdin file for getting chars from console","stdout file for putting chars to console","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","a simple logger","","","","","Returns the argument unchanged.","initiate logger","Calls <code>U::from(self)</code>.","","","","","","","","","tracker for physical page frame allocation and deallocation","The kernel’s initial memory mapping(kernel address space)","map permission corresponding to that in pte: <code>R W X U</code>","address space","page table structure","page table entry structure","Definitions","Physical Page Number PPN phiscal page number","iterator for phy/virt page number","An abstraction over a buffer passed from user space to …","An iterator over a UserBuffer","Virtual Address virtual address","Virtual Page Number VPN","","","","","bits of page table entry","A list of buffers","","","","Allocate a physical page frame in FrameTracker style","","Deallocate a physical page frame with a given ppn","","The global allocator","initiate heap allocator, frame allocator and kernel space","the kernel token","","Implementation of <code>PageTableEntry</code> and <code>PageTable</code>.","","physical page number","test map function in page table","","step by one element(page number)","Translate&amp;Copy a ptru8 array with LENGTH len to a mutable …","Translate a ptru8 array through page table and return a …","Translate a ptru8 array through page table and return a …","Translate&amp;Copy a ptru8 array end with <code>\\\\0</code> to a <code>String</code> Vec …","","","","","","","Definitions","Physical Page Number PPN phiscal page number","a simple range structure for type T","iterator for the simple range structure","iterator for phy/virt page number","","a simple range structure for virtual page number","","Virtual Address virtual address","Virtual Page Number VPN","Check if the physical address is aligned by page size","Check if the virtual address is aligned by page size","","","","","","","","","","","","","Get the (ceil) physical page number","Get the (ceil) virtual page number","","","","","","","","","","","","","","","","","","","","","Get the (floor) physical page number","Get the (floor) virtual page number","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get the reference of page(array of bytes)","","Get the mutable reference of physical address","Get the mutable reference of physical address","Get the reference of page table(array of ptes)","Get the immutable reference of physical address","","Get the indexes of the page table entry","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Get the page offset of physical address","Get the page offset of virtual address","","","","","","step by one element(page number)","","","","","","","","","","","","","","","","","","","","","","","","","","frame allocator instance through lazy_static!","","","tracker for physical page frame allocation and deallocation","an implementation for frame allocator","","","","","","","","","","","","","","","","","Allocate a physical page frame in FrameTracker style","a simple test for frame allocator","Deallocate a physical page frame with a given ppn","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","initiate the frame allocator using <code>ekernel</code> and <code>MEMORY_END</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new FrameTracker","","physical page number","","","","","","","","","","","heap allocator instance","heap space ([u8; KERNEL_HEAP_SIZE])","panic when heap allocation error occurs","","initiate heap allocator","","","The kernel’s initial memory mapping(kernel address space)","map area structure, controls a contiguous piece of virtual …","map permission corresponding to that in pte: <code>R W X U</code>","map type for memory set: identical or framed","address space","Readable","Accessible in U mode","Writable","Excutable","","Change page table by writing satp CSR Register.","Returns the set containing all flags.","append the area to new_end","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","data: start-aligned but maybe with shorter length assume …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Include sections in elf and trampoline and TrapContext and …","Create a new address space by copy code&amp;data from a exited …","","","Inserts the specified flags in-place.","Assume that no conflicts.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","the kernel token","","","","Mention that trampoline is not collected by areas.","","","","Create a new empty <code>MemorySet</code>.","Without kernel stacks.","Returns the complement of this set of flags.","","","Add a new MapArea into this MemorySet. Assuming that there …","Remove all <code>MapArea</code>","test map function in page table","Removes the specified flags in-place.","remove a area","","","Inserts or removes the specified flags depending on the …","shrink the area to new_end","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Get the page table token","Translate a virtual page number to a page table entry","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","page table entry flags","page table structure","page table entry structure","","","An abstraction over a buffer passed from user space to …","An iterator over a UserBuffer","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","bits of page table entry","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","A list of buffers","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Create an empty page table entry","","The page pointered by page table entry is executable?","","Find PageTableEntry by VirtPageNum","Find PageTableEntry by VirtPageNum, create a frame for a …","Get the flags from the page table entry","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Temporarily used to get arguments from user space.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","The page pointered by page table entry is valid?","Get the length of the buffer","set the map between virtual page number and physical page …","","Create a new page table","Constuct UserBuffer","Create a new page table entry","","Returns the complement of this set of flags.","","Get the physical page number from the page table entry","The page pointered by page table entry is readable?","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","get the token from the page table","get the page table entry from the virtual page number","get the physical address from the virtual address","Translate&amp;Copy a ptru8 array with LENGTH len to a mutable …","Translate a ptru8 array through page table and return a …","Translate a ptru8 array through page table and return a …","Translate&amp;Copy a ptru8 array end with <code>\\\\0</code> to a <code>String</code> Vec …","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","remove the map between virtual page number and physical …","The page pointered by page table entry is writable?","","","","","use sbi call to getchar from console (qemu uart handler)","use sbi call to putchar in console (qemu uart handler)","general sbi call","use sbi call to set timer","use sbi call to shutdown the kernel","Wrap a static data structure inside it so that we are able …","inner data","Uniprocessor interior mutability primitives","Wrap a static data structure inside it so that we are able …","","","Panic if the data has been borrowed.","Returns the argument unchanged.","inner data","Calls <code>U::from(self)</code>.","User is responsible to guarantee that inner struct is only …","","","","close syscall","dup syscall","exec syscall","exit syscall","fork syscall","fstat syscall","getpid syscall","gettime syscall","kill syscall","linkat syscall","mmap syscall","munmap syscall","open syscall","pipe syscall","read syscall","sbrk syscall","setpriority syscall","sigaction syscall","sigprocmask syscall","sigreturn syscall","spawn syscall","taskinfo syscall","unlinkat syscall","waitpid syscall","write syscall","yield syscall","File and filesystem-related syscalls","Process management syscalls","handle syscall exception with <code>syscall_id</code> and other …","","","YOUR JOB: Implement fstat.","YOUR JOB: Implement linkat.","","","","YOUR JOB: Implement unlinkat.","","Task information","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Task status in it’s life cycle","","","","YOUR JOB: get time with second and microsecond HINT: You …","","","YOUR JOB: Implement mmap.","YOUR JOB: Implement munmap.","change data segment size","","","","","YOUR JOB: Implement spawn. HINT: fork + exec =/= spawn","YOUR JOB: Finish sys_task_info to pass testcases HINT: You …","If there is not a child process whose pid is same as …","","The numbers of syscall called by task","Total running time of task","","","","","","","","","","pid of usertests app in make run TEST=1","Creation of initial process","Kernel stack for a process(task)","The max signal number","Abstract structure of PID","ready to run","running","Action for a signal","Signal actions","Signal flags","task context structure containing some registers","Task control block structure","task status: UnInit, Ready, Running, Exited","uninitialized","exited","","","Add init process to the manager","Add process to ready queue","","","","call kernel signal handler","call user signal handler","Check if the current task has any signal to handle","Check if the current task has any signal to handle","Implementation of <code>TaskContext</code>","Add signal to the current task","Get a copy of the current task","Get the mutable reference to trap context of current task","Get the current user token(addr of page table)","","Exit the current ‘Running’ task and run the next task …","Returns the argument unchanged.","Handle signals for the current process","Signal handler address","Task pid implementation.","Mutable","Calls <code>U::from(self)</code>.","Kernel stack corresponding to PID","allocate a new kernel stack","Implementation of <code>TaskManager</code>","Signal mask","Process identifier","Get process by pid","Allocate a new PID","Implementation of <code>Processor</code> and Intersection of control …","Ret position after task switching","The main part of process execution and scheduling Loop …","s0-11 register, callee saved","Return to idle control flow for new scheduling","","Stack pointer","Make current task suspended and switch to the next task","Wrap <code>switch.S</code> as a function","Signal actions table","Get current task through take, leaving a None in its place","Types related to task management &amp; Functions for …","","","","Action for a signal","Signal actions","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Signal handler address","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Signal mask","Signal actions table","","","","","","","","","task context structure containing some registers","","","Returns the argument unchanged.","Create a new task context with a trap return addr and a …","Calls <code>U::from(self)</code>.","Ret position after task switching","s0-11 register, callee saved","Stack pointer","","","","Create a new empty task context","","","","Kernel stack for a process(task)","","Abstract structure of PID","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the top of the KernelStack","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return (bottom, top) of a kernel stack in kernel space.","allocate a new kernel stack","","Allocate a new PID","Push a variable of type T into the top of the KernelStack …","","","","","","","","","","","","","","","","","PID2PCB instance (map of pid to pcb)","TASK_MANAGER instance through lazy_static!","","","","Add process back to ready queue","Add process to ready queue","","","","","","","","","Take a process out of the ready queue","Take a process out of the ready queue","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creat an empty TaskManager","Get process by pid","","Remove item(pid, _some_pcb) from PDI2PCB map (called by …","","","","","","","","","","","Processor management structure","","","","","","Get current task in cloning semanteme","The task currently executing on the current processor","Get a copy of the current task","Get the mutable reference to trap context of current task","Get the current user token(addr of page table)","","Returns the argument unchanged.","Returns the argument unchanged.","Get mutable reference to <code>idle_task_cx</code>","The basic control flow of each core, helping to select and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an empty Processor","The main part of process execution and scheduling Loop …","Return to idle control flow for new scheduling","Get current task in moving semanteme","Get current task through take, leaving a None in its place","","","","","","","The max signal number","Abort","Alarm clock","Bus error","Child stopped or terminated","Continue","Default signal handling","Floating point exception","Hangup","Illegal instruction","Interrupt","I/O possible","Kill","Broken pipe","Profiling timer expired","Power failure","Quit","Segmentation fault","Stack fault","Stop, unblockable","Bad system call","Termination","Trace/breakpoint trap","Stop signal","Terminal input for background process","Terminal output for background process","Urgent condition on socket","User-defined signal 1","User-defined signal 2","Virtual timer expired","Window size change","CPU time limit exceeded","File size limit exceeded","Signal flags","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","Check if there is an error in the signal flags","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","ready to run","running","Task control block structure","","task status: UnInit, Ready, Running, Exited","uninitialized","exited","","Application data can only appear in areas where the …","","","","","","","change the location of the program break. return None if …","A vector containing TCBs of all child processes of the …","","","","Load a new elf to replace the original application address …","It is set when active exit or execution error occurs","","Fork from parent to child","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Get the address of app’s page table","","get pid of process","","Heap bottom","Mutable","Get the mutable reference of the inner TCB","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Kernel stack corresponding to PID","","Application address space","Create a new process","Parent process of the current process. Weak will not …","Process identifier","Program break","","","","Save task context","Maintain the execution status of the current process","","","The physical page number of the frame where the trap …","","","","","","","","","","The number of microseconds per second","The number of milliseconds per second","The number of ticks per second","Get the current time in ticks","get current time in milliseconds","get current time in microseconds","Set the next timer interrupt","trap context structure containing sstatus, sepc and …","Implementation of <code>TrapContext</code>","enable timer interrupt in supervisor mode","Initialize trap handling","Token of kernel address space","Kernel stack pointer of the current application","Supervisor Exception Program Counter","","","Supervisor Status Register","handle trap from kernel Unimplement: …","trap handler","Virtual address of trap handler entry point in kernel","return to user space set the new addr of __restore asm …","General-Purpose Register x0-31","trap context structure containing sstatus, sepc and …","init the trap context of an application","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Token of kernel address space","Kernel stack pointer of the current application","Supervisor Exception Program Counter","put the sp(stack pointer) into x[2] field of TrapContext","Supervisor Status Register","","Virtual address of trap handler entry point in kernel","","","","General-Purpose Register x0-31"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,5,5,5,5,0,0,0,14,0,0,0,8,0,8,8,8,8,8,8,8,8,0,14,0,0,0,0,10,14,83,10,14,83,10,10,83,83,14,83,10,14,83,10,14,83,14,14,83,10,14,83,10,14,83,10,83,14,15,15,0,15,0,0,0,0,0,0,0,15,15,15,15,15,15,23,15,15,15,20,15,20,15,32,15,15,15,15,15,20,15,15,15,15,20,15,15,15,15,15,20,15,15,15,15,15,15,24,20,0,15,15,15,20,15,15,15,0,0,20,15,20,15,0,20,15,0,84,84,24,32,15,15,0,15,15,15,15,15,20,15,20,15,20,15,15,84,24,32,84,23,0,0,0,23,23,0,23,23,26,23,23,23,23,23,23,23,23,23,24,85,26,23,24,85,26,23,23,23,23,23,23,26,23,23,23,23,23,23,23,23,23,24,85,26,23,23,23,23,23,23,24,85,23,23,23,24,85,26,23,23,23,0,23,24,23,85,0,23,24,24,23,24,24,23,23,23,23,23,23,23,24,85,26,23,24,85,26,23,24,85,26,23,23,24,24,24,31,31,31,0,0,0,0,30,30,30,30,32,30,31,32,30,31,32,31,31,31,32,30,31,30,32,30,31,0,30,32,30,32,32,32,30,30,30,31,32,30,31,32,30,31,32,30,31,32,32,32,30,30,32,0,0,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,0,0,36,36,36,36,36,0,36,36,36,36,36,42,43,40,44,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,51,52,57,25,59,59,59,0,0,0,54,0,0,0,0,0,51,39,0,54,86,0,0,0,0,42,43,40,44,0,0,0,0,0,0,0,0,0,0,0,0,42,43,47,42,43,40,44,46,47,42,43,40,44,46,42,43,42,43,40,44,46,42,43,40,44,46,42,43,40,44,47,47,42,43,40,44,42,43,42,43,40,44,47,42,42,42,43,43,43,40,40,40,44,44,44,46,40,46,42,40,40,42,46,44,47,42,43,40,44,46,47,46,46,42,43,40,44,47,46,47,42,43,42,43,40,44,46,86,40,44,42,43,40,44,46,47,42,43,40,44,46,47,42,43,40,44,46,47,42,43,40,44,46,0,0,0,0,0,49,87,48,39,48,49,39,48,49,48,87,48,49,39,48,39,0,0,0,39,48,49,48,0,39,48,49,87,39,48,39,48,39,48,49,39,48,49,39,48,49,0,0,0,0,0,55,55,0,0,0,0,0,52,52,52,52,56,51,52,51,53,51,52,52,52,52,52,52,52,52,51,53,56,55,52,51,53,56,55,52,55,52,55,52,52,52,52,53,53,56,52,0,0,0,52,55,52,0,0,52,55,52,52,52,52,52,51,53,56,55,52,53,52,52,52,51,51,52,52,52,51,52,52,51,53,56,55,52,52,52,0,53,53,53,51,53,52,53,51,51,52,51,52,51,51,0,52,51,0,0,52,51,53,0,0,0,52,52,52,55,52,52,51,51,51,53,56,55,52,51,53,56,55,52,51,53,56,55,52,52,53,53,53,58,58,58,0,0,0,58,58,0,0,58,58,58,58,58,58,58,58,58,58,57,58,58,54,25,59,58,57,54,25,59,58,57,25,59,58,57,58,57,58,58,58,59,59,58,58,57,58,57,58,54,54,57,58,58,58,58,58,54,54,25,59,58,57,58,58,58,58,54,58,58,58,58,54,25,59,58,57,25,59,58,58,57,25,54,58,54,25,57,59,58,58,57,57,58,54,58,58,58,58,58,57,58,54,54,54,0,0,0,0,54,25,59,58,57,54,25,59,58,57,54,25,59,58,57,58,54,57,0,0,0,0,0,0,0,0,0,0,11,0,0,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,63,65,63,0,63,65,63,65,63,63,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,65,65,63,65,63,65,63,63,70,69,0,0,0,0,0,82,82,0,0,0,0,0,0,82,82,68,0,0,0,62,68,68,0,0,0,0,0,0,0,0,0,68,0,68,0,64,0,66,68,66,0,0,64,66,0,0,0,71,0,71,0,0,71,0,0,72,0,0,68,68,68,0,0,64,72,64,72,64,72,64,72,64,72,64,64,72,64,64,72,64,72,64,72,64,72,64,72,64,72,0,71,71,71,71,71,71,71,71,71,71,71,71,70,69,0,0,0,0,0,74,75,73,73,70,69,74,75,73,70,69,74,75,73,73,74,75,70,69,73,70,69,74,75,69,73,70,69,74,75,0,0,73,0,69,73,73,70,69,74,75,73,70,69,74,75,73,70,69,74,75,0,0,0,77,78,76,0,76,77,78,76,77,78,77,78,76,0,76,77,78,76,77,78,76,0,76,0,76,77,78,76,77,78,76,77,78,0,0,80,79,80,79,80,79,79,0,0,0,80,79,80,79,79,79,80,79,0,0,79,0,79,80,79,80,79,80,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,82,82,0,0,0,82,82,81,81,66,81,82,66,81,82,66,81,82,82,82,66,81,81,66,66,81,82,81,81,81,66,81,66,81,81,66,66,66,81,82,81,66,81,81,66,81,66,81,81,81,81,81,81,82,81,81,66,81,82,66,81,82,66,81,82,0,0,0,0,0,0,0,0,0,0,0,67,67,67,0,0,67,0,0,67,0,67,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67],"f":[[[]],0,0,0,0,0,0,0,0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[2],[[],3],[[],3],[[],4],[[5,6],7],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[8,9],[[]],[[]],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[10,11],[12,12],[[12,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[12,12],[[14,12]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[12,12],[[14,12]],0,0,0,0,0,0,0,0,0,0,0,[[],15],[[15,15],15],[[15,15]],[[15,15],15],[[15,15]],[15,16],0,0,[[15,15],15],[[15,15]],[[]],[[]],[[]],[[]],0,[15,15],[[]],[[15,15],17],[15,15],[[15,15],18],0,[[15,15],15],[[],15],[[15,15],18],[[15,19]],[[20,21],7],[[15,21],7],[[15,21],7],[[15,21],7],[[15,21],7],[[15,21],7],[[]],[[]],[16,[[22,[15]]]],[16,15],[16,15],[19,15],[15],0,0,0,[[15,15]],[[15,15],15],[[15,15],18],[[]],[[]],[15,18],[15,18],[[]],[[]],0,[[15,15],18],0,[15,15],[[6,23],[[22,[[9,[24]]]]]],0,[[15,15],[[22,[17]]]],0,[25,12],[[],18],0,0,[[15,15]],[[15,15,18]],0,[[15,15],15],[[15,15]],[[15,15],15],[[]],[[15,15]],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[15,15],15],[[],18],0,0,[25,12],0,0,0,0,0,0,0,0,0,0,[[],23],[[23,23],23],[[23,23]],[[23,23],23],[[23,23]],[23,16],0,[[23,23],23],[[23,23]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,23],[[]],[[23,23],17],[23,23],[[23,23],18],[26,9],[[23,23],23],[[],23],[[23,23],18],[[23,19]],[[23,21],7],[[23,21],7],[[23,21],7],[[23,21],7],[[23,21],7],[[]],[[]],[[]],[[]],[16,[[22,[23]]]],[16,23],[16,23],[19,23],[23],0,0,[[23,23]],[[23,23],23],[[23,23],18],[[]],[[]],[[]],[[]],[23,18],[23,18],[[]],[[23,23],18],[[18,18,[9,[27]]],24],[23,23],0,[[6,23],[[22,[[9,[24]]]]]],[[23,23],[[22,[17]]]],[[24,25],12],[24,[[29,[28]]]],[23],[24,18],0,[[23,23]],[[23,23,18]],[[23,23],23],[[23,23]],[[23,23],23],[[]],[[23,23]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],[[23,23],23],[24,18],0,[[24,25],12],0,0,0,0,0,0,0,[30,18],0,[30,12],[30,12],[[]],[[]],[[]],[[]],[[]],[[]],0,[31,31],[[]],[[31,31],18],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],30],[[32,25],12],[30,28],[[[9,[[11,[30]]]]],32],[32,18],0,[[30,9]],0,0,[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[32,18],0,[[32,25],12],[[30,28]],0,[[[9,[[11,[30]]]]],32],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[33,25],12],[[34,25],12],[33,18],[34,18],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[33,18],[34,18],[[33,25],12],[[34,25],12],[35,1],0,[[]],[[]],[[36,37],18],[36],[[]],[[]],[[]],[[36,38]],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[22,[39]]]],0,[40],0,0,[[]],[[],12],0,0,0,0,[[]],0,[[]],[[12,28,12],29],[12],[12],[[12,28],41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[42,18],[43,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,40],[43,44],[42,42],[43,43],[40,40],[44,44],[[[46,[45]]],[[46,[45]]]],[[]],[[]],[[]],[[]],[[]],[[42,42],17],[[43,43],17],[[40,40],17],[[44,44],17],0,0,[[42,42],18],[[43,43],18],[[40,40],18],[[44,44],18],[42,40],[43,44],[[42,21],7],[[43,21],7],[[40,21],7],[[44,21],7],[[]],[12,42],[40,42],[[]],[[]],[12,43],[44,43],[[]],[12,40],[42,40],[12,44],[43,44],[[]],[[]],[40],[46],[42],[40],[40],[42],[46],[44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46],0,[[42,42],18],[[43,43],18],[[40,40],18],[[44,44],18],[[],47],[[],46],[47,22],[42,12],[43,12],[[42,42],[[22,[17]]]],[[43,43],[[22,[17]]]],[[40,40],[[22,[17]]]],[[44,44],[[22,[17]]]],0,[[]],[40],[44],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,0,0,0,0,0,[[],[[22,[40]]]],[48,[[22,[40]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[40],[[48,40]],[49,11],[39],0,[[39,21],7],[[],[[22,[39]]]],[[]],[40],[[]],[[]],[[]],[[48,40,40]],[[]],[[]],[[]],[[]],[[]],[40,39],[[],48],0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],0,0,[50,1],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[51],[[],52],[[51,43,43],18],[[53,54,44]],0,[[52,52],52],[[52,52]],[[52,52],52],[[52,52]],[52,28],0,[[52,52],52],[[52,52]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55,55],[52,52],[[]],[[]],[[52,52],17],[52,52],[[52,52],18],[[53,54]],0,[56,9],[[52,52],52],0,0,0,[[],52],[[55,55],18],[[52,52],18],0,0,[[52,19]],[[55,21],7],[[52,21],7],[[52,21],7],[[52,21],7],[[52,21],7],[[52,21],7],[[]],[[]],[[]],[[]],[[]],[53,53],[28,[[22,[52]]]],[28,52],[28,52],[[]],[51,51],[19,52],[52],[[52,52]],[[51,43,43,52]],[[52,52],52],[[52,52],18],[[]],[[]],[[]],[[]],[[]],[52,18],[52,18],[[],12],[[53,54]],[[53,54,44]],0,[51],0,[[52,52],18],[[43,43,55,52],53],[[],51],[[],51],[52,52],0,[[52,52],[[22,[17]]]],[[51,53,22]],[51],[[]],[[52,52]],[[51,44]],0,0,[[52,52,18]],[[51,43,43],18],[[53,54,44]],0,0,0,[[52,52],52],[[52,52]],[[52,52],52],[[]],[[]],[[52,52]],[51,12],[[51,44],[[22,[57]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],[[],4],[[52,52],52],[[53,54]],[[53,54,44]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],58],[[58,58],58],[[58,58]],[[58,58],58],[[58,58]],[58,28],0,0,[[58,58],58],[[58,58]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[58,58],[57,57],[[]],[[]],[[58,58],17],[58,58],[[58,58],18],0,0,[[58,58],58],[[],58],[[],57],[[58,58],18],[57,18],[[58,19]],[[54,44],[[22,[57]]]],[[54,44],[[22,[57]]]],[57,58],[[58,21],7],[[58,21],7],[[58,21],7],[[58,21],7],[[58,21],7],0,[[]],[[]],[[]],[[]],[[]],[28,[[22,[58]]]],[28,58],[28,58],[19,58],[12,54],[58],[[58,58]],[[58,58],58],[[58,58],18],[[]],[[]],[[]],[[]],[[]],[25],[[]],[58,18],[58,18],[57,18],[25,12],[[54,44,40,58]],[[58,58],18],[[],54],[29,25],[[40,58],57],[59,22],[58,58],[[58,58],[[22,[17]]]],[57,40],[57,18],[[58,58]],0,[[58,58,18]],[[58,58],58],[[58,58]],[[58,58],58],[[]],[[]],[[58,58]],[54,12],[[54,44],[[22,[57]]]],[[54,43],[[22,[42]]]],[[12,28,12],29],[12],[12],[[12,28],41],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],[[],4],[[58,58],58],[[54,44]],[57,18],0,0,0,0,[[],12],[12],[[12,12,12,12],12],[12],[[],1],0,0,0,0,[[]],[[]],[11,60],[[]],0,[[]],[[],11],[[],3],[[],3],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[12,61],[12,61],[12,61],[[12,20],61],[[28,28],61],[[28,16],61],[12,61],[[12,28,12],61],[28,61],[[12,28,12],61],0,0,[[]],[[]],[[]],[[]],[[62,12,12],18],[[63,21],7],[[]],[[]],[[]],[[]],0,0,[[28,12],61],[13,1],[[],61],[[63,12],61],[[],61],[[12,13],61],[[12,12,12],61],[[12,12],61],[13,61],[61,61],[[13,64,64],61],[16,61],[[],61],[28,61],[65,61],[[61,13],61],[[],61],0,0,[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[[9,[66]]]],0,[[]],[[]],[62],[[12,62]],[[]],[[],22],0,[62],[[],[[22,[[9,[66]]]]]],[[],67],[[],12],[68,9],[13],[[]],[[]],0,0,0,[[]],0,[[],69],0,0,0,[12,[[22,[[9,[66]]]]]],[[],70],0,0,[[]],0,[71],0,0,[[]],0,0,[[],[[22,[[9,[66]]]]]],0,[[],3],[[],3],[[],4],0,0,[[]],[[]],[[]],[[]],[64,64],[72,72],[[]],[[]],[[],64],[[],72],[[64,21],7],[[]],[[]],0,[[]],[[]],0,0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,[[]],[[]],[[]],[12,71],[[]],0,0,0,[[],3],[[],3],[[],4],[[],71],0,0,0,0,0,0,0,0,0,[73,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[73,12]],[74,11],[75,11],[70],[69],[[]],[[]],[[]],[[]],[[]],[69,12],[[]],[[]],[[]],[[]],[[]],[12],[[],69],[[],73],[[],70],[69],0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],[[],4],0,0,0,0,0,[[76,[9,[66]]]],[[[9,[66]]]],[[]],[[]],[[]],[[]],[[]],[[]],[77,11],[78,11],[76,[[22,[[9,[66]]]]]],[[],[[22,[[9,[66]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],76],[12,[[22,[[9,[66]]]]]],0,[12],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],0,0,0,[[]],[[]],[[]],[[]],[79,[[22,[[9,[66]]]]]],0,[[],[[22,[[9,[66]]]]]],[[],67],[[],12],[80,11],[[]],[[]],[79,71],0,[[]],[[]],[[],79],[[]],[71],[79,[[22,[[9,[66]]]]]],[[],[[22,[[9,[66]]]]]],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],62],[[62,62],62],[[62,62]],[[62,62],62],[[62,62]],[62,16],0,[[62,62],62],[[62,62]],[[]],[[]],[62,22],[62,62],[[]],[[62,62],17],[62,62],[[62,62],18],[[62,62],62],[[],62],[[62,62],18],[[62,19]],[[62,21],7],[[62,21],7],[[62,21],7],[[62,21],7],[[62,21],7],[[]],[16,[[22,[62]]]],[16,62],[16,62],[19,62],[62],[[62,62]],[[62,62],62],[[62,62],18],[[]],[62,18],[62,18],[[62,62],18],[62,62],[[62,62],[[22,[17]]]],[[62,62]],[[62,62,18]],[[62,62],62],[[62,62]],[[62,62],62],[[]],[[62,62]],[[],3],[[],3],[[],4],[[62,62],62],0,0,0,0,0,0,0,0,[81,12],0,[[]],[[]],[[]],[[]],[[]],[[]],[[66,13],[[22,[12]]]],0,[82,82],[[]],[[82,82],18],[[66,[29,[41]]]],0,0,[9,[[9,[66]]]],[[]],[[]],[[]],0,[81,82],[81,67],[66,12],[81,12],[66,12],0,0,0,[66,[[60,[81]]]],[[]],[[]],[[]],[81,18],0,0,0,[[],66],0,0,0,0,0,0,0,0,[[]],0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],0,0,0,[[],12],[[],12],[[],12],[[]],0,0,[[]],[[]],0,0,0,[[]],[[]],0,[[],1],[[],1],0,[[],1],0,0,[[12,12,12,12,12],67],[[]],[[]],[67,67],[[]],[[67,21],7],[[]],[[]],0,0,0,[[67,12]],0,[[]],0,[[],3],[[],3],[[],4],0],"p":[[15,"never"],[3,"Arguments"],[4,"Result"],[3,"TypeId"],[3,"Stdout"],[15,"str"],[6,"Result"],[3,"BLOCK_DEVICE"],[3,"Arc"],[3,"QUEUE_FRAMES"],[3,"UPSafeCell"],[15,"usize"],[15,"i32"],[3,"VirtIOBlock"],[3,"StatMode"],[15,"u32"],[4,"Ordering"],[15,"bool"],[8,"IntoIterator"],[3,"Stat"],[3,"Formatter"],[4,"Option"],[3,"OpenFlags"],[3,"OSInode"],[3,"UserBuffer"],[3,"ROOT_INODE"],[3,"Inode"],[15,"u8"],[3,"Vec"],[3,"PipeRingBuffer"],[4,"RingBufferStatus"],[3,"Pipe"],[3,"Stdin"],[3,"Stdout"],[3,"PanicInfo"],[3,"SimpleLogger"],[3,"Metadata"],[3,"Record"],[3,"FrameTracker"],[3,"PhysPageNum"],[3,"String"],[3,"PhysAddr"],[3,"VirtAddr"],[3,"VirtPageNum"],[8,"Clone"],[3,"SimpleRange"],[3,"SimpleRangeIterator"],[3,"StackFrameAllocator"],[3,"FRAME_ALLOCATOR"],[3,"Layout"],[3,"MemorySet"],[3,"MapPermission"],[3,"MapArea"],[3,"PageTable"],[4,"MapType"],[3,"KERNEL_SPACE"],[3,"PageTableEntry"],[3,"PTEFlags"],[3,"UserBufferIterator"],[3,"RefMut"],[15,"isize"],[3,"SignalFlags"],[3,"TimeVal"],[3,"SignalAction"],[3,"TaskInfo"],[3,"TaskControlBlock"],[3,"TrapContext"],[3,"INITPROC"],[3,"KernelStack"],[3,"PidHandle"],[3,"TaskContext"],[3,"SignalActions"],[3,"RecycleAllocator"],[3,"PID_ALLOCATOR"],[3,"KSTACK_ALLOCATOR"],[3,"TaskManager"],[3,"TASK_MANAGER"],[3,"PID2TCB"],[3,"Processor"],[3,"PROCESSOR"],[3,"TaskControlBlockInner"],[4,"TaskStatus"],[3,"VirtioHal"],[8,"File"],[3,"OSInodeInner"],[8,"StepByOne"],[8,"FrameAllocator"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
